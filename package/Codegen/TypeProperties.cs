// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Codegen
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\asklar\source\repos\react-native-xaml\package\Codegen\TypeProperties.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class TypeProperties : Generator
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(@"#pragma once
#include ""pch.h""
#include ""XamlMetadata.h""
#include ""Crc32Str.h""

/*************************************************************
THIS FILE WAS AUTOMATICALLY GENERATED, DO NOT MODIFY MANUALLY
**************************************************************/

");
            
            #line 15 "C:\Users\asklar\source\repos\react-native-xaml\package\Codegen\TypeProperties.tt"
 foreach (var ns in Properties.Select(p => p.DeclaringType.GetNamespace()).Distinct()) { 
            
            #line default
            #line hidden
            this.Write("#include <winrt/");
            
            #line 16 "C:\Users\asklar\source\repos\react-native-xaml\package\Codegen\TypeProperties.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ns));
            
            #line default
            #line hidden
            this.Write(".h>\r\n");
            
            #line 17 "C:\Users\asklar\source\repos\react-native-xaml\package\Codegen\TypeProperties.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n#define MAKE_GET_DP(type, prop) IsType<type>, []() { return type::prop(); }\r\n\r\n" +
                    "/*static*/ const PropInfo xamlPropertyMap[] = {\r\n");
            
            #line 22 "C:\Users\asklar\source\repos\react-native-xaml\package\Codegen\TypeProperties.tt"
 foreach (var p in Properties) { 
            
            #line default
            #line hidden
            this.Write("    { MAKE_KEY(\"");
            
            #line 23 "C:\Users\asklar\source\repos\react-native-xaml\package\Codegen\TypeProperties.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Util.ToJsName(p.GetName())));
            
            #line default
            #line hidden
            this.Write("\"), MAKE_GET_DP(");
            
            #line 23 "C:\Users\asklar\source\repos\react-native-xaml\package\Codegen\TypeProperties.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Util.GetCppWinRTType(p.DeclaringType)));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 23 "C:\Users\asklar\source\repos\react-native-xaml\package\Codegen\TypeProperties.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p.GetName()));
            
            #line default
            #line hidden
            this.Write("Property), SetPropValue<");
            
            #line 23 "C:\Users\asklar\source\repos\react-native-xaml\package\Codegen\TypeProperties.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Util.GetCppWinRTType(p.GetPropertyType())));
            
            #line default
            #line hidden
            this.Write(">, ViewManagerPropertyType::");
            
            #line 23 "C:\Users\asklar\source\repos\react-native-xaml\package\Codegen\TypeProperties.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Util.GetVMPropertyType(p.GetPropertyType())));
            
            #line default
            #line hidden
            this.Write(" },\r\n");
            
            #line 24 "C:\Users\asklar\source\repos\react-native-xaml\package\Codegen\TypeProperties.tt"
 } 
            
            #line default
            #line hidden
            this.Write("};\r\n\r\n#ifdef USE_CRC32\r\nvoid XamlMetadata::Populate");
            
            #line 28 "C:\Users\asklar\source\repos\react-native-xaml\package\Codegen\TypeProperties.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            
            #line default
            #line hidden
            this.Write("NativeProps(winrt::Windows::Foundation::Collections::IMap<winrt::hstring, ViewMan" +
                    "agerPropertyType>& nativeProps) const {\r\n");
            
            #line 29 "C:\Users\asklar\source\repos\react-native-xaml\package\Codegen\TypeProperties.tt"
 foreach (MiddleweightReflection.MrProperty p in Properties.Distinct(new Codegen.NameEqualityComparer())) { 
            
            #line default
            #line hidden
            this.Write("    nativeProps.Insert(winrt::to_hstring(\"");
            
            #line 30 "C:\Users\asklar\source\repos\react-native-xaml\package\Codegen\TypeProperties.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Util.ToJsName(p.GetName())));
            
            #line default
            #line hidden
            this.Write("\"), ViewManagerPropertyType::");
            
            #line 30 "C:\Users\asklar\source\repos\react-native-xaml\package\Codegen\TypeProperties.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Util.GetVMPropertyType(p.GetPropertyType())));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 31 "C:\Users\asklar\source\repos\react-native-xaml\package\Codegen\TypeProperties.tt"
 } 
            
            #line default
            #line hidden
            this.Write("}\r\n#else\r\nvoid XamlMetadata::Populate");
            
            #line 34 "C:\Users\asklar\source\repos\react-native-xaml\package\Codegen\TypeProperties.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            
            #line default
            #line hidden
            this.Write("NativeProps(winrt::Windows::Foundation::Collections::IMap<winrt::hstring, ViewMan" +
                    "agerPropertyType>& nativeProps) const {\r\n  for (auto const& entry : xaml");
            
            #line 35 "C:\Users\asklar\source\repos\react-native-xaml\package\Codegen\TypeProperties.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            
            #line default
            #line hidden
            this.Write("PropertyMap) {\r\n    nativeProps.Insert(winrt::to_hstring(entry.propName), entry.j" +
                    "sType);\r\n  }\r\n}\r\n#endif\r\n\r\n\r\n");
            
            #line 42 "C:\Users\asklar\source\repos\react-native-xaml\package\Codegen\TypeProperties.tt"
 if (Name != "") { 
            
            #line default
            #line hidden
            this.Write("#define RNX_HAS_CUSTOM_PROPS\r\n");
            
            #line 44 "C:\Users\asklar\source\repos\react-native-xaml\package\Codegen\TypeProperties.tt"
 } 
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
