<#@ template language="C#" inherits="Generator" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
#pragma once
#include "pch.h"
#include "XamlMetadata.h"
#include "Crc32Str.h"

/*************************************************************
THIS FILE WAS AUTOMATICALLY GENERATED, DO NOT MODIFY MANUALLY
**************************************************************/

<# foreach (var ns in Properties.Select(p => p.DeclaringType.GetNamespace()).Distinct()) { #>
#include <winrt/<#= ns #>.h>
<# } #>

#define MAKE_GET_DP(type, prop) IsType<type>, []() { return type::prop(); }

/*static*/ const PropInfo xamlPropertyMap[] = {
<# foreach (var p in Properties) { #>
    { MAKE_KEY("<#= Util.ToJsName(p.GetName()) #>"), MAKE_GET_DP(<#= Util.GetCppWinRTType(p.DeclaringType) #>, <#= p.GetName() #>Property), SetPropValue<<#= Util.GetCppWinRTType(p.GetPropertyType()) #>>, ViewManagerPropertyType::<#= Util.GetVMPropertyType(p.GetPropertyType())  #> },
<# } #>
};

#ifdef USE_CRC32
void XamlMetadata::Populate<#= Name #>NativeProps(winrt::Windows::Foundation::Collections::IMap<winrt::hstring, ViewManagerPropertyType>& nativeProps) const {
<# foreach (MiddleweightReflection.MrProperty p in Properties.Distinct(new Codegen.NameEqualityComparer())) { #>
    nativeProps.Insert(winrt::to_hstring("<#= Util.ToJsName(p.GetName()) #>"), ViewManagerPropertyType::<#= Util.GetVMPropertyType(p.GetPropertyType())  #>);
<# } #>
}
#else
void XamlMetadata::Populate<#= Name #>NativeProps(winrt::Windows::Foundation::Collections::IMap<winrt::hstring, ViewManagerPropertyType>& nativeProps) const {
  for (auto const& entry : xaml<#= Name #>PropertyMap) {
    nativeProps.Insert(winrt::to_hstring(entry.propName), entry.jsType);
  }
}
#endif


<# if (Name != "") { #>
#define RNX_HAS_CUSTOM_PROPS
<# } #>
