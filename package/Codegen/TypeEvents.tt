<#@ template language="C#" inherits="Generator" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
#include "pch.h"
#include "XamlMetadata.h"
#include "Serialize.h"
#include "Crc32Str.h"
#include <JSValueWriter.h>

/*************************************************************
THIS FILE WAS AUTOMATICALLY GENERATED, DO NOT MODIFY MANUALLY
**************************************************************/

<# foreach (var ns in Events.Select(p => p.DeclaringType.GetNamespace()).Distinct()) { #>
#include <winrt/<#= ns #>.h>
<# } #>
#include <winrt/Windows.UI.Xaml.Input.h>

/////// Events
template<typename TArgs>
void SerializeEventArgs(winrt::Microsoft::ReactNative::IJSValueWriter const& writer, const winrt::Windows::Foundation::IInspectable& sender, const TArgs& args);

/*static*/ const EventInfo EventInfo::xaml<#= Name #>EventMap[] = {
<# foreach (var evt in Events) { #>
  {"<#= evt.GetName() #>", [](const winrt::Windows::Foundation::IInspectable& ii, const IReactContext& reactContext, bool isWrapped) {
  winrt::Windows::Foundation::IInspectable o = (isWrapped) ? ii.as<ContentControl>().Content() : ii;
  if (auto c = o.try_as<<#= Util.GetCppWinRTType(evt.DeclaringType) #>>()) {
        c.<#= evt.GetName() #>([reactContext, ii] (<#= Util.GetCppWinRTEventSignature(evt) #>) {
            if (auto fe = sender ? sender.try_as<xaml::FrameworkElement>() : 
            (ii ? ii.try_as<xaml::FrameworkElement>() : nullptr)) {
              reactContext.DispatchEvent(fe, L"top<#= evt.GetName() #>", [sender, args](winrt::Microsoft::ReactNative::IJSValueWriter const& evtDataWriter) noexcept {
                SerializeEventArgs(evtDataWriter, sender, args);
              });
            }
        });
    }
    } },
<# } #>

};

static_assert(ARRAYSIZE(EventInfo::xaml<#= Name #>EventMap) == <#= Events.Count() #>);

<# if (Name != "") { #>
#define RNX_HAS_CUSTOM_EVENTS
<# } #>
